name: 'Phase 2: EasyPIM Policy Orchestrator'

run-name: >-
  EasyPIM ${{ github.event.inputs.WhatIf == 'true' && 'üîç Preview' || '‚ö° Apply' }}
  (${{ github.event.inputs.Mode }})
  ${{ github.event.inputs.configSecretName && format('- Triggered by Key Vault secret change: {0} in {1}', github.event.inputs.configSecretName, vars.AZURE_KEYVAULT_NAME) ||
      (github.event.inputs.run_description && format('- {0}', github.event.inputs.run_description) || '') }}
  ${{ github.event.inputs.configSecretName && (contains(github.event.inputs.configSecretName, 'TEST') && ' (Test Mode - Preview Only)' || ' (Production Mode)') || '' }}

on:
  workflow_dispatch:
    inputs:
      run_description:
        description: "Custom description for this run (optional)"
        required: false
        type: string
        default: ""
      configSecretName:
        description: "Key Vault secret name containing PIM configuration (auto-detected when triggered by Azure Function)"
        required: false
        type: string
        default: ""
      WhatIf:
        description: "Preview mode - show what would be done without making changes"
        required: false
        default: true
        type: boolean
      Mode:
        description: "Orchestrator execution mode (delta=incremental, initial=destructive cleanup)"
        required: false
        default: "delta"
        type: choice
        options:
          - delta
          - initial
      SkipPolicies:
        description: "Skip policy operations (assignments only)"
        required: false
        default: false
        type: boolean
      SkipAssignments:
        description: "Skip assignment operations (policies only)"
        required: false
        default: false
        type: boolean
      AllowProtectedRoles:
        description: "Allow operations on protected roles (Global Admin, Security Admin, etc.)"
        required: false
        default: false
        type: boolean
      Verbose:
        description: "Enable verbose output"
        required: false
        default: false
        type: boolean
      ExportWouldRemove:
        description: "Export list of items that would be removed (audit purposes)"
        required: false
        default: false
        type: boolean

env:
  KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
  SECRET_NAME: ${{ github.event.inputs.configSecretName || vars.AZURE_KEYVAULT_SECRET_NAME }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  orchestrator-test:
    runs-on: ubuntu-latest
    name: 'EasyPIM Orchestrator Execution'

    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4

    - name: 'Install and Validate EasyPIM Modules (Critical Path)'
      shell: pwsh
      run: |
        Write-Host "üî• CRITICAL: Installing and validating EasyPIM modules..." -ForegroundColor Red
        $success = . ./scripts/workflows/Install-EasyPIMModules.ps1
        if (-not $success) {
          Write-Error "‚ùå CRITICAL FAILURE: EasyPIM modules installation failed"
          exit 1
        }

        # Additional strict validation after installation
        Write-Host "üîç CRITICAL: Performing strict module validation..." -ForegroundColor Yellow

        # Test that we can actually invoke the orchestrator function
        try {
          $testParams = @{
            KeyVaultName = "test"
            SecretName = "test"
            WhatIf = $true
            TestMode = $true
          }

          # This should fail gracefully but prove the function is accessible
          $null = Get-Command "Invoke-EasyPIMOrchestrator" -ErrorAction Stop
          Write-Host "‚úÖ CRITICAL: Invoke-EasyPIMOrchestrator function is accessible" -ForegroundColor Green
        }
        catch {
          Write-Error "‚ùå CRITICAL FAILURE: Invoke-EasyPIMOrchestrator function not accessible: $($_.Exception.Message)"
          Write-Host "üîç Available EasyPIM commands:" -ForegroundColor Yellow
          Get-Command -Module EasyPIM* | Select-Object Name, ModuleName | Format-Table -AutoSize
          exit 1
        }

    - name: 'Azure OIDC Login'
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.TENANT_ID }}
        subscription-id: ${{ env.SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: 'EasyPIM Orchestrator Execution'
      shell: pwsh
      run: |
        # Restore inline execution - external script has issues with module scope in GitHub Actions Linux
        Write-Host "‚öôÔ∏è Starting EasyPIM Orchestrator execution..." -ForegroundColor Cyan

        # Import modules in this execution context
        Import-Module EasyPIM -Force
        Import-Module EasyPIM.Orchestrator -Force
        
        # Import required Azure modules for orchestrator
        Import-Module Az.KeyVault -Force
        Import-Module Az.Resources -Force
        Import-Module Az.Profile -Force

        # Verify function is available
        $orchestratorFunction = Get-Command "Invoke-EasyPIMOrchestrator" -ErrorAction SilentlyContinue
        if (-not $orchestratorFunction) {
          Write-Error "‚ùå CRITICAL: Invoke-EasyPIMOrchestrator function not available"
          exit 1
        }

        Write-Host "‚úÖ Module verification passed, proceeding with orchestrator..." -ForegroundColor Green
        
        # Setup Microsoft Graph authentication for EasyPIM
        Write-Host "üîó Setting up Microsoft Graph authentication using Azure CLI token..." -ForegroundColor Cyan
        try {
          # Get Azure CLI access token and use it for Microsoft Graph
          $azToken = az account get-access-token --resource https://graph.microsoft.com --query accessToken --output tsv
          if (-not $azToken) {
            throw "Failed to get Azure CLI access token"
          }
          
          Write-Host "‚úÖ Successfully obtained Graph token, connecting to Microsoft Graph..." -ForegroundColor Green
          
          # Connect to Microsoft Graph using the token
          $secureToken = ConvertTo-SecureString $azToken -AsPlainText -Force
          Connect-MgGraph -AccessToken $secureToken -NoWelcome
          
          Write-Host "‚úÖ Connected to Microsoft Graph successfully" -ForegroundColor Green
          
          # Verify the connection
          $mgContext = Get-MgContext
          Write-Host "üîç Microsoft Graph Context:" -ForegroundColor Cyan
          Write-Host "   ClientId: $($mgContext.ClientId)" -ForegroundColor White
          Write-Host "   TenantId: $($mgContext.TenantId)" -ForegroundColor White
          Write-Host "   Scopes: $($mgContext.Scopes -join ', ')" -ForegroundColor White
        }
        catch {
          Write-Error "‚ùå Failed to setup Microsoft Graph authentication: $($_.Exception.Message)"
          exit 1
        }

        # Build parameters for Invoke-EasyPIMOrchestrator
        $params = @{
          KeyVaultName = '${{ env.KEYVAULT_NAME }}'
          SecretName = '${{ env.SECRET_NAME }}'
          TenantId = '${{ env.TENANT_ID }}'
          SubscriptionId = '${{ env.SUBSCRIPTION_ID }}'
          Mode = '${{ github.event.inputs.Mode }}'
        }

        # Add boolean parameters only if true
        if ('${{ github.event.inputs.WhatIf }}' -eq 'true') {
          $params.WhatIf = $true
        }

        if ('${{ github.event.inputs.SkipPolicies }}' -eq 'true') {
          $params.SkipPolicies = $true
        }

        if ('${{ github.event.inputs.SkipAssignments }}' -eq 'true') {
          $params.SkipAssignments = $true
        }

        if ('${{ github.event.inputs.AllowProtectedRoles }}' -eq 'true') {
          $params.AllowProtectedRoles = $true
        }

        if ('${{ github.event.inputs.ExportWouldRemove }}' -eq 'true') {
          $params.WouldRemoveExportPath = "./would-remove-export.json"
        }

        # Capture start time
        $startTime = Get-Date

        try {
          Write-Host "üöÄ Calling Invoke-EasyPIMOrchestrator..." -ForegroundColor Cyan
          Invoke-EasyPIMOrchestrator @params

          # Capture end time and create summary
          $endTime = Get-Date
          $executionTime = ($endTime - $startTime).ToString("mm\:ss")

          Write-Host "‚úÖ EasyPIM Orchestrator completed successfully" -ForegroundColor Green
          Write-Host "‚è±Ô∏è Execution time: $executionTime" -ForegroundColor Cyan

          # Create summary JSON for the dashboard
          $summaryData = @{
            "Status" = "Success"
            "ExecutionTime" = $executionTime
            "StartTime" = $startTime.ToString("yyyy-MM-ddTHH:mm:ssZ")
            "EndTime" = $endTime.ToString("yyyy-MM-ddTHH:mm:ssZ")
            "Parameters" = $params
            "Mode" = if ($params.WhatIf) { "Preview" } else { "Applied" }
            "ConfigurationSource" = if ('${{ github.event.inputs.configSecretName }}') { "Event-Driven" } else { "Manual" }
            "RunDescription" = '${{ github.event.inputs.run_description }}'
          }

          $summaryData | ConvertTo-Json -Depth 3 | Out-File -FilePath "./easypim-summary.json" -Encoding utf8
          Write-Host "üìä Summary data saved for dashboard" -ForegroundColor Green
        }
        catch {
          Write-Host "‚ùå EasyPIM Orchestrator failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Full error details:" -ForegroundColor Red
          $_ | Format-List * -Force

          # Create error summary for dashboard
          $errorSummary = @{
            "Status" = "Failed"
            "Error" = $_.Exception.Message
            "Timestamp" = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            "Parameters" = $params
          }
          $errorSummary | ConvertTo-Json -Depth 3 | Out-File -FilePath "./easypim-error.json" -Encoding utf8

          exit 1
        }

    - name: 'Generate Modern Dashboard Summary'
      if: always()
      shell: pwsh
      run: |
        . ./scripts/workflows/Generate-OrchestratorDashboard.ps1 `
          -JobStatus '${{ job.status }}' `
          -WhatIfMode '${{ github.event.inputs.WhatIf }}' `
          -ConfigSecretName '${{ github.event.inputs.configSecretName }}' `
          -RunDescription '${{ github.event.inputs.run_description }}' `
          -Mode '${{ github.event.inputs.Mode }}' `
          -KeyVaultName '${{ env.KEYVAULT_NAME }}' `
          -SecretName '${{ env.SECRET_NAME }}' `
          -TenantId '${{ env.TENANT_ID }}' `
          -SubscriptionId '${{ env.SUBSCRIPTION_ID }}' `
          -SkipPolicies '${{ github.event.inputs.SkipPolicies }}' `
          -SkipAssignments '${{ github.event.inputs.SkipAssignments }}' `
          -AllowProtectedRoles '${{ github.event.inputs.AllowProtectedRoles }}' `
          -GitHubRepository '${{ github.repository }}' `
          -GitHubRunId '${{ github.run_id }}' `
          -GitHubRunNumber '${{ github.run_number }}'

    - name: 'Prepare Execution Artifacts'
      if: always()
      shell: pwsh
      run: |
        . ./scripts/workflows/Collect-OrchestratorArtifacts.ps1 `
          -RunId '${{ github.run_id }}' `
          -RunNumber '${{ github.run_number }}' `
          -JobStatus '${{ job.status }}' `
          -WhatIf '${{ github.event.inputs.WhatIf }}' `
          -Mode '${{ github.event.inputs.Mode }}' `
          -SecretName '${{ env.SECRET_NAME }}' `
          -KeyVaultName '${{ env.KEYVAULT_NAME }}' `
          -ConfigSecretName '${{ github.event.inputs.configSecretName }}'

    - name: 'Upload Execution Artifacts'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: easypim-execution-${{ github.run_number }}-${{ github.event.inputs.configSecretName || 'default' }}
        path: ./workflow-artifacts/
        retention-days: 30
        if-no-files-found: warn
