name: "01 - Authentication Test"

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required for repository access

env:
  # These should be configured as repository secrets or variables
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  KEYVAULT_NAME: ${{ vars.AZURE_KEY_VAULT_NAME || 'kv-easypim-default' }}

jobs:
  authentication-test:
    name: "üîê Authentication Test"
    runs-on: ubuntu-latest
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîê Azure Login (OIDC)"
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: "üìã Verify Azure Context"
        shell: pwsh
        run: |
          Write-Host "üîç Verifying Azure authentication..." -ForegroundColor Yellow
          
          # Check Azure CLI context
          $context = az account show --query '{subscriptionId:id, tenantId:tenantId, name:name}' -o json | ConvertFrom-Json
          
          if ($context) {
            Write-Host "‚úÖ Azure CLI Authentication SUCCESS!" -ForegroundColor Green
            Write-Host "   Subscription: $($context.name)" -ForegroundColor White
            Write-Host "   Subscription ID: $($context.subscriptionId)" -ForegroundColor White
            Write-Host "   Tenant ID: $($context.tenantId)" -ForegroundColor White
          } else {
            Write-Host "‚ùå Azure CLI Authentication FAILED!" -ForegroundColor Red
            exit 1
          }

      - name: "üîë Test Key Vault Access"
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "üîë Testing Key Vault access..." -ForegroundColor Yellow
          Write-Host "   Key Vault: $env:KEYVAULT_NAME" -ForegroundColor Cyan
          
          try {
            # Test Key Vault access
            $secretsJson = az keyvault secret list --vault-name $env:KEYVAULT_NAME --query '[].{Name:name}' -o json
            
            if ($secretsJson -and $secretsJson -ne "[]" -and $secretsJson -ne "null") {
              $secrets = $secretsJson | ConvertFrom-Json
              Write-Host "‚úÖ Key Vault access SUCCESS!" -ForegroundColor Green
              Write-Host "   Available secrets: $($secrets.Count)" -ForegroundColor White
              
              if ($false) {
                Write-Host "   Secret names:" -ForegroundColor Cyan
                $secrets | ForEach-Object { Write-Host "     - $($_.Name)" -ForegroundColor Gray }
              }
            } else {
              Write-Host "‚ö†Ô∏è Key Vault accessible but no secrets found" -ForegroundColor Yellow
            }
            
            # Explicit success
            Write-Host "üîë Key Vault test completed successfully" -ForegroundColor Green
            exit 0
          } catch {
            Write-Host "‚ùå Key Vault access FAILED!" -ForegroundColor Red
            Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "üîê Install PowerShell Modules"
        shell: pwsh
        run: |
          Write-Host "üì¶ Installing required PowerShell modules..." -ForegroundColor Yellow
          
          $modules = @(
            'Microsoft.Graph.Authentication',
            'EasyPIM.Orchestrator'
          )
          
          foreach ($module in $modules) {
            Write-Host "   Installing: $module" -ForegroundColor Cyan
            try {
              # Force remove existing module if loaded to avoid conflicts
              if (Get-Module -Name $module -ErrorAction SilentlyContinue) {
                Write-Host "     Removing existing loaded module..." -ForegroundColor Gray
                Remove-Module -Name $module -Force -ErrorAction SilentlyContinue
              }
              
              # Install with retry logic for conflicting module issues
              $installAttempt = 1
              $maxAttempts = 3
              do {
                try {
                  Install-Module -Name $module -Force -AllowClobber -Scope CurrentUser -Repository PSGallery -ErrorAction Stop
                  Write-Host "     ‚úÖ Installation successful" -ForegroundColor Green
                  break
                } catch {
                  Write-Host "     ‚ö†Ô∏è Install attempt $installAttempt failed: $($_.Exception.Message)" -ForegroundColor Yellow
                  $installAttempt++
                  if ($installAttempt -le $maxAttempts) {
                    Write-Host "     Retrying in 2 seconds..." -ForegroundColor Gray
                    Start-Sleep 2
                  }
                }
              } while ($installAttempt -le $maxAttempts)
              
              # Import the module
              Write-Host "     Importing module..." -ForegroundColor Gray
              Import-Module -Name $module -Force -ErrorAction Stop
              Write-Host "     ‚úÖ Module imported successfully" -ForegroundColor Green
              
            } catch {
              Write-Host "     ‚ùå Failed to install/import $module`: $($_.Exception.Message)" -ForegroundColor Red
              # Continue with other modules instead of failing completely
            }
          }
          
          Write-Host "‚úÖ PowerShell modules installation completed!" -ForegroundColor Green

      - name: "üìä Test Microsoft Graph Authentication"
        shell: pwsh
        run: |
          Write-Host "üîê Testing Microsoft Graph authentication..." -ForegroundColor Yellow
          
          try {
            # Get access token using Azure CLI (which uses OIDC)
            $graphToken = az account get-access-token --resource "https://graph.microsoft.com/" --query "accessToken" -o tsv
            
            if ($graphToken) {
              Write-Host "‚úÖ Graph token obtained!" -ForegroundColor Green
              
              # Test connecting to Microsoft Graph
              $secureToken = ConvertTo-SecureString $graphToken -AsPlainText -Force
              Connect-MgGraph -AccessToken $secureToken -NoWelcome
              
              $context = Get-MgContext
              if ($context) {
                Write-Host "‚úÖ Microsoft Graph Connected!" -ForegroundColor Green
                Write-Host "   Client ID: $($context.ClientId)" -ForegroundColor White
                Write-Host "   Tenant ID: $($context.TenantId)" -ForegroundColor White
                Write-Host "   Scopes: $($context.Scopes -join ', ')" -ForegroundColor White
              } else {
                throw "Microsoft Graph context not established"
              }
            } else {
              throw "Failed to obtain Graph token"
            }
          } catch {
            Write-Host "‚ùå Microsoft Graph authentication FAILED!" -ForegroundColor Red
            Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "üéØ Test EasyPIM Module"
        shell: pwsh
        run: |
          Write-Host "üéØ Testing EasyPIM.Orchestrator module..." -ForegroundColor Yellow
          
          try {
            # First, try to import the module again to ensure it's loaded
            Write-Host "   Ensuring module is loaded..." -ForegroundColor Gray
            Import-Module -Name EasyPIM.Orchestrator -Force -ErrorAction Stop
            
            # Check if EasyPIM module is properly loaded
            $module = Get-Module -Name EasyPIM.Orchestrator
            if ($module) {
              Write-Host "‚úÖ EasyPIM.Orchestrator loaded!" -ForegroundColor Green
              Write-Host "   Version: $($module.Version)" -ForegroundColor White
              Write-Host "   Module Path: $($module.ModuleBase)" -ForegroundColor Gray
              
              # List available commands
              $commands = Get-Command -Module EasyPIM.Orchestrator -ErrorAction SilentlyContinue
              if ($commands) {
                Write-Host "   Available commands: $($commands.Count)" -ForegroundColor White
                
                if ($false) {
                  Write-Host "   Command list:" -ForegroundColor Cyan
                  $commands | ForEach-Object { Write-Host "     - $($_.Name)" -ForegroundColor Gray }
                }
              } else {
                Write-Host "   ‚ö†Ô∏è No commands found in module (this might be expected)" -ForegroundColor Yellow
              }
              
              Write-Host "‚úÖ EasyPIM module test PASSED!" -ForegroundColor Green
              
            } else {
              throw "EasyPIM.Orchestrator module not loaded"
            }
          } catch {
            Write-Host "‚ùå EasyPIM module test FAILED!" -ForegroundColor Red
            Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Red
            
            # Diagnostic information
            Write-Host "üìã Module diagnostics:" -ForegroundColor Cyan
            $allModules = Get-Module -ListAvailable | Where-Object { $_.Name -like "*EasyPIM*" -or $_.Name -like "*Graph*" }
            if ($allModules) {
              Write-Host "   Available related modules:" -ForegroundColor Gray
              $allModules | ForEach-Object { Write-Host "     - $($_.Name) v$($_.Version)" -ForegroundColor Gray }
            } else {
              Write-Host "   No EasyPIM or Graph modules found in available modules" -ForegroundColor Yellow
            }
            
            # Check PowerShell Gallery availability
            try {
              $moduleInfo = Find-Module -Name EasyPIM.Orchestrator -ErrorAction Stop
              Write-Host "   Module exists in PowerShell Gallery: v$($moduleInfo.Version)" -ForegroundColor Gray
            } catch {
              Write-Host "   ‚ö†Ô∏è Could not find EasyPIM.Orchestrator in PowerShell Gallery: $($_.Exception.Message)" -ForegroundColor Yellow
            }
            
            exit 1
          }

      - name: "üìã Authentication Summary"
        shell: pwsh
        run: |
          Write-Host "" -ForegroundColor White
          Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
          Write-Host "                    üîê EasyPIM Authentication Test Results" -ForegroundColor Cyan
          Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
          Write-Host "" -ForegroundColor White
          
          Write-Host "üéØ Test Summary" -ForegroundColor Yellow
          Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
          Write-Host "‚îÇ Azure OIDC Authentication   ‚îÇ ‚úÖ PASSED      ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Key Vault Access            ‚îÇ ‚úÖ PASSED      ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Microsoft Graph Token       ‚îÇ ‚úÖ PASSED      ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ EasyPIM Module              ‚îÇ ‚úÖ PASSED      ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
          Write-Host "" -ForegroundColor White
          
          Write-Host "‚öôÔ∏è Configuration" -ForegroundColor Yellow
          Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
          Write-Host "‚îÇ Repository                  ‚îÇ ${{ github.repository }}" -ForegroundColor Gray
          Write-Host "‚îÇ Key Vault                   ‚îÇ $env:KEYVAULT_NAME" -ForegroundColor Gray
          Write-Host "‚îÇ Tenant ID                   ‚îÇ $env:AZURE_TENANT_ID" -ForegroundColor Gray
          Write-Host "‚îÇ Subscription ID             ‚îÇ $env:AZURE_SUBSCRIPTION_ID" -ForegroundColor Gray
          Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
          Write-Host "" -ForegroundColor White
          
          Write-Host "üéâ SUCCESS: Your EasyPIM authentication is properly configured!" -ForegroundColor Green
          Write-Host "   You can now run the main EasyPIM workflows with confidence." -ForegroundColor White
          Write-Host "" -ForegroundColor White
          
          Write-Host "üöÄ Next Steps:" -ForegroundColor Yellow
          Write-Host "‚Ä¢ Run 'EasyPIM Orchestrator' workflow for PIM management" -ForegroundColor White
          Write-Host "‚Ä¢ Run 'EasyPIM Drift Detection' workflow for compliance monitoring" -ForegroundColor White
          Write-Host "‚Ä¢ Configure scheduled runs for automated governance" -ForegroundColor White
