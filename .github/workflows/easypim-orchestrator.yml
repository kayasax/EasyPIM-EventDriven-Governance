name: 'Phase 2: EasyPIM Policy Orchestrator'

run-name: >-
  EasyPIM ${{ github.event.inputs.WhatIf == 'true' && 'üîç Preview' || '‚ö° Apply' }}
  (${{ github.event.inputs.Mode }})
  ${{ github.event.inputs.configSecretName && format('- Triggered by Key Vault secret change: {0} in {1}', github.event.inputs.configSecretName, vars.AZURE_KEYVAULT_NAME) ||
      (github.event.inputs.run_description && format('- {0}', github.event.inputs.run_description) || '') }}
  ${{ github.event.inputs.configSecretName && (contains(github.event.inputs.configSecretName, 'TEST') && ' (Test Mode - Preview Only)' || ' (Production Mode)') || '' }}

on:
  workflow_dispatch:
    inputs:
      run_description:
        description: "Custom description for this run (optional)"
        required: false
        type: string
        default: ""
      configSecretName:
        description: "Key Vault secret name containing PIM configuration (auto-detected when triggered by Azure Function)"
        required: false
        type: string
        default: ""
      WhatIf:
        description: "Preview mode - show what would be done without making changes"
        required: false
        default: true
        type: boolean
      Mode:
        description: "Orchestrator execution mode (delta=incremental, initial=destructive cleanup)"
        required: false
        default: "delta"
        type: choice
        options:
          - delta
          - initial
      SkipPolicies:
        description: "Skip policy operations (assignments only)"
        required: false
        default: false
        type: boolean
      SkipAssignments:
        description: "Skip assignment operations (policies only)"
        required: false
        default: false
        type: boolean
      AllowProtectedRoles:
        description: "Allow operations on protected roles (Global Admin, Security Admin, etc.)"
        required: false
        default: false
        type: boolean
      Verbose:
        description: "Enable verbose output"
        required: false
        default: false
        type: boolean
      ExportWouldRemove:
        description: "Export list of items that would be removed (audit purposes)"
        required: false
        default: false
        type: boolean

env:
  KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
  SECRET_NAME: ${{ github.event.inputs.configSecretName || vars.AZURE_KEYVAULT_SECRET_NAME }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

permissions:
  id-token: write   # for OIDC
  contents: read

jobs:
  orchestrator-test:
    runs-on: ubuntu-latest
    name: 'EasyPIM Orchestrator Execution'

    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4

    - name: 'Azure OIDC Login'
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.TENANT_ID }}
        subscription-id: ${{ env.SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: 'Install EasyPIM Modules'
      shell: pwsh
      run: |
        & ./scripts/workflows/Install-EasyPIMModules.ps1

    - name: 'EasyPIM Orchestrator Execution'
      shell: pwsh
      run: |
        Write-Host "‚öôÔ∏è Starting EasyPIM Orchestrator execution..." -ForegroundColor Cyan

        # Ensure authentication is established in this step
        Write-Host "üîç Verifying authentication context..." -ForegroundColor Cyan
        $graphContext = Get-MgContext
        if (-not $graphContext) {
          Write-Host "‚ùå Microsoft Graph context not found. Establishing authentication..." -ForegroundColor Yellow
          # Re-run authentication in this step
          $authResult = & "./scripts/workflows/Setup-EasyPIMAuthentication.ps1" -TenantId "$env:TENANT_ID" -SubscriptionId "$env:SUBSCRIPTION_ID" -ClientId "$env:AZURE_CLIENT_ID"
          if (-not $authResult) {
            Write-Error "‚ùå Authentication setup failed"
            exit 1
          }
          $graphContext = Get-MgContext
        }

        if (-not $graphContext) {
          Write-Error "‚ùå Failed to establish Graph context"
          exit 1
        }

        Write-Host "‚úÖ Graph context verified:" -ForegroundColor Green
        Write-Host "   Client ID: $($graphContext.ClientId)" -ForegroundColor White
        Write-Host "   Tenant ID: $($graphContext.TenantId)" -ForegroundColor White
        Write-Host "   Scopes: $($graphContext.Scopes -join ', ')" -ForegroundColor White

        Write-Host "Configuration:" -ForegroundColor Cyan
        Write-Host "  Key Vault: ${{ env.KEYVAULT_NAME }}" -ForegroundColor White
        Write-Host "  Secret Name: ${{ env.SECRET_NAME }}" -ForegroundColor White
        if ('${{ github.event.inputs.configSecretName }}' -ne '') {
          Write-Host "  ‚ö° Dynamic config from Event Grid trigger" -ForegroundColor Green
        } else {
          Write-Host "  üìã Default config from manual trigger" -ForegroundColor Yellow
        }

        Write-Host "Parameters:" -ForegroundColor Yellow
        Write-Host "  WhatIf: ${{ github.event.inputs.WhatIf }}" -ForegroundColor White
        Write-Host "  Mode: ${{ github.event.inputs.Mode }}" -ForegroundColor White
        Write-Host "  SkipPolicies: ${{ github.event.inputs.SkipPolicies }}" -ForegroundColor White
        Write-Host "  SkipAssignments: ${{ github.event.inputs.SkipAssignments }}" -ForegroundColor White
        Write-Host "  AllowProtectedRoles: ${{ github.event.inputs.AllowProtectedRoles }}" -ForegroundColor White
        Write-Host "  Verbose: ${{ github.event.inputs.Verbose }}" -ForegroundColor White
        Write-Host "  ExportWouldRemove: ${{ github.event.inputs.ExportWouldRemove }}" -ForegroundColor White

        # Build parameters for Invoke-EasyPIMOrchestrator
        $params = @{
          KeyVaultName = '${{ env.KEYVAULT_NAME }}'
          SecretName = '${{ env.SECRET_NAME }}'
          TenantId = '${{ env.TENANT_ID }}'
          SubscriptionId = '${{ env.SUBSCRIPTION_ID }}'
          Mode = '${{ github.event.inputs.Mode }}'
        }        # Add conditional parameters
        if ('${{ github.event.inputs.WhatIf }}' -eq 'true') {
          $params.WhatIf = $true
          Write-Host "üîç Running in WhatIf mode (preview only)" -ForegroundColor Yellow
        }

        if ('${{ github.event.inputs.SkipPolicies }}' -eq 'true') {
          $params.SkipPolicies = $true
          Write-Host "‚è≠Ô∏è Skipping policy operations" -ForegroundColor Yellow
        }

        if ('${{ github.event.inputs.SkipAssignments }}' -eq 'true') {
          $params.SkipAssignments = $true
          Write-Host "‚è≠Ô∏è Skipping assignment operations" -ForegroundColor Yellow
        }

        if ('${{ github.event.inputs.AllowProtectedRoles }}' -eq 'true') {
          $params.AllowProtectedRoles = $true
          Write-Host "‚ö†Ô∏è Protected roles operations enabled" -ForegroundColor Yellow
        }

        if ('${{ github.event.inputs.Verbose }}' -eq 'true') {
          $params.Verbose = $true
          Write-Host "üìù Verbose output enabled" -ForegroundColor Yellow
        }

        if ('${{ github.event.inputs.ExportWouldRemove }}' -eq 'true') {
          $params.WouldRemoveExportPath = "./would-remove-export.json"
          Write-Host "üì§ Export would-remove list enabled (path: ./would-remove-export.json)" -ForegroundColor Yellow
        }

        try {
          # Execute EasyPIM Orchestrator
          Write-Host "`nüîÑ Executing EasyPIM Orchestrator..." -ForegroundColor Cyan

          # Capture start time
          $startTime = Get-Date

          Invoke-EasyPIMOrchestrator @params

          # Capture end time and create summary
          $endTime = Get-Date
          $executionTime = ($endTime - $startTime).ToString("mm\:ss")

          Write-Host "‚úÖ EasyPIM Orchestrator completed successfully" -ForegroundColor Green
          Write-Host "‚è±Ô∏è Execution time: $executionTime" -ForegroundColor Cyan

          # Try to create a summary JSON for the dashboard (this will depend on EasyPIM's output capabilities)
          try {
            $summaryData = @{
              "Status" = "Success"
              "ExecutionTime" = $executionTime
              "StartTime" = $startTime.ToString("yyyy-MM-ddTHH:mm:ssZ")
              "EndTime" = $endTime.ToString("yyyy-MM-ddTHH:mm:ssZ")
              "Parameters" = $params
              "Mode" = if ($params.WhatIf) { "Preview" } else { "Applied" }
            }

            $summaryData | ConvertTo-Json -Depth 3 | Out-File -FilePath "./easypim-summary.json" -Encoding utf8
            Write-Host "üìä Summary data saved for dashboard" -ForegroundColor Green
          } catch {
            Write-Host "‚ö†Ô∏è Could not create summary data: $($_.Exception.Message)" -ForegroundColor Yellow
          }
        }
        catch {
          Write-Host "‚ùå EasyPIM Orchestrator failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Full error details:" -ForegroundColor Red
          $_ | Format-List * -Force
          throw
        }

    - name: 'Generate Modern Dashboard Summary'
      if: always()
      shell: pwsh
      run: |
        Write-Host "üìä Generating modern dashboard summary..." -ForegroundColor Cyan

        # Determine execution status
        $status = '${{ job.status }}'
        $statusIcon = if ($status -eq 'success') { '‚úÖ' } else { '‚ùå' }
        $statusColor = if ($status -eq 'success') { 'üü¢' } else { 'üî¥' }

        # Determine execution mode badge
        $whatIfMode = '${{ github.event.inputs.WhatIf }}' -eq 'true'
        $modeBadge = if ($whatIfMode) { 'üîç **PREVIEW MODE**' } else { '‚ö° **LIVE EXECUTION**' }

        # Configuration source detection
        $configSource = if ('${{ github.event.inputs.configSecretName }}') {
          'üöÄ **Event-Driven** (Auto-triggered)'
        } else {
          'üë§ **Manual Trigger**'
        }

        # Try to capture EasyPIM results if available
        $easypimResults = ""
        if (Test-Path "./easypim-summary.json") {
          try {
            $results = Get-Content "./easypim-summary.json" | ConvertFrom-Json
            $easypimResults = @"

        ### üìà **EasyPIM Execution Results**

        | Component | Processed | Created | Updated | Removed | Errors |
        |-----------|-----------|---------|---------|---------|---------|
        | üîê **Policies** | $($results.Policies.Processed) | $($results.Policies.Created) | $($results.Policies.Updated) | $($results.Policies.Removed) | $($results.Policies.Errors) |
        | üë§ **Assignments** | $($results.Assignments.Processed) | $($results.Assignments.Created) | $($results.Assignments.Updated) | $($results.Assignments.Removed) | $($results.Assignments.Errors) |
        | üè∑Ô∏è **Groups** | $($results.Groups.Processed) | $($results.Groups.Created) | $($results.Groups.Updated) | $($results.Groups.Removed) | $($results.Groups.Errors) |

        **‚è±Ô∏è Total Execution Time:** $($results.ExecutionTime) | **üîÑ Objects Processed:** $($results.TotalProcessed)
        "@
          } catch {
            $easypimResults = "`n### üìä **EasyPIM Results**`n*Detailed results will be available when EasyPIM generates summary output*"
          }
        } else {
          $easypimResults = "`n### üìä **EasyPIM Results**`n*Check execution logs above for detailed operation results*"
        }

        $summary = @"
        # $statusIcon **EasyPIM Event-Driven Governance Dashboard**

        ## üéØ **Execution Overview**

        | üö¶ **Status** | üéÆ **Mode** | üì° **Trigger** | ‚è∞ **Timestamp** |
        |---------------|-------------|-----------------|------------------|
        | $statusColor **$($status.ToUpper())** | $modeBadge | $configSource | $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC') |

        $easypimResults

        ## ‚öôÔ∏è **Configuration Matrix**

        <table>
        <tr>
        <td>

        **üéõÔ∏è Execution Parameters**
        - $modeBadge
        - **Mode:** ``${{ github.event.inputs.Mode }}``
        - **Skip Policies:** ``${{ github.event.inputs.SkipPolicies }}``
        - **Skip Assignments:** ``${{ github.event.inputs.SkipAssignments }}``
        - **Protected Roles:** ``${{ github.event.inputs.AllowProtectedRoles }}``

        </td>
        <td>

        **üîß Environment Context**
        - **Vault:** ``${{ env.KEYVAULT_NAME }}``
        - **Config:** ``${{ env.SECRET_NAME }}``
        - **Tenant:** ``${{ env.TENANT_ID }}``
        - **Subscription:** ``${{ env.SUBSCRIPTION_ID }}``

        </td>
        </tr>
        </table>

        ## üß† **Event-Driven Intelligence**

        ${{ github.event.inputs.configSecretName && '> **üéØ Smart Detection:** Configuration automatically selected based on event trigger' || '> **üìã Manual Configuration:** Using repository default configuration settings' }}

        ${{ github.event.inputs.run_description && '> **üìù Event Context:** See workflow artifacts for full event details' || '' }}

        ## üöÄ **Quick Actions**

        | Action | Description | Link |
        |--------|-------------|------|
        | üîç **View Logs** | Detailed execution logs | [üìã Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
        | üîÑ **Re-run** | Execute workflow again | [‚ö° Actions](https://github.com/${{ github.repository }}/actions/workflows/02-orchestrator-test.yml) |
        | üéØ **Drift Check** | Verify compliance | [üéØ Phase 3](https://github.com/${{ github.repository }}/actions/workflows/03-policy-drift-check.yml) |
        | üìñ **Documentation** | Setup guide | [üìö Platform Guide](https://github.com/${{ github.repository }}/blob/main/docs/Platform-Setup-Guide.md) \| [üöÄ GitHub Guide](https://github.com/${{ github.repository }}/blob/main/docs/GitHub-Actions-Guide.md) |

        ---

        <details>
        <summary>üîß <strong>Technical Details</strong></summary>

        - **Run ID:** ``${{ github.run_id }}``
        - **Run Number:** ``#${{ github.run_number }}``
        - **Triggered by:** ``${{ github.actor }}``
        - **Repository:** ``${{ github.repository }}``
        - **Branch:** ``${{ github.ref_name }}``
        - **Workflow:** ``Phase 2 - EasyPIM Orchestrator``
        - **Version:** ``v1.1 (Event-Driven Multi-Environment)``

        </details>

        > üí° **Next Steps:** ${{ github.event.inputs.WhatIf == 'true' && 'This was a preview run. Re-run with WhatIf=false to apply changes.' || 'Changes have been applied. Consider running drift detection to verify compliance.' }}
        "@

        # Output to step summary
        $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8
        Write-Host "‚úÖ Modern dashboard summary generated" -ForegroundColor Green

    - name: 'Upload Execution Artifacts'
      if: always()
      shell: pwsh
      run: |
        Write-Host "üì¶ Preparing execution artifacts..." -ForegroundColor Cyan

        # Create artifacts directory
        $artifactsDir = "./workflow-artifacts"
        New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null

        # Collect available log files and outputs
        $artifactFiles = @()

        # Check for common log locations
        $logPaths = @("./LOGS/", "./*.log", "./*.json", "./would-remove-export.json", "./easypim-summary.json")
        foreach ($path in $logPaths) {
          $files = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
          if ($files) {
            $files | Copy-Item -Destination $artifactsDir -Force -ErrorAction SilentlyContinue
            $artifactFiles += $files.Name
          }
        }

        # Create a manifest file
        $manifest = @{
          "RunId" = "${{ github.run_id }}"
          "RunNumber" = "${{ github.run_number }}"
          "Status" = "${{ job.status }}"
          "Timestamp" = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
          "Configuration" = @{
            "WhatIf" = "${{ github.event.inputs.WhatIf }}"
            "Mode" = "${{ github.event.inputs.Mode }}"
            "ConfigSecret" = "${{ env.SECRET_NAME }}"
            "Vault" = "${{ env.KEYVAULT_NAME }}"
          }
          "Files" = $artifactFiles
        } | ConvertTo-Json -Depth 3

        $manifest | Out-File -FilePath "$artifactsDir/execution-manifest.json" -Encoding utf8

        # Create summary for artifacts
        if ($artifactFiles.Count -gt 0) {
          Write-Host "‚úÖ Collected $($artifactFiles.Count) artifact files" -ForegroundColor Green
          $artifactFiles | ForEach-Object { Write-Host "   üìÑ $_" -ForegroundColor White }
        } else {
          Write-Host "‚ÑπÔ∏è No log files found to archive" -ForegroundColor Yellow
          # Create a placeholder file so the artifact upload doesn't fail
          "No execution logs were generated during this run." | Out-File -FilePath "$artifactsDir/no-logs.txt" -Encoding utf8
        }

    - name: 'Upload Execution Artifacts'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: easypim-execution-${{ github.run_number }}-${{ github.event.inputs.configSecretName || 'default' }}
        path: ./workflow-artifacts/
        retention-days: 30
        if-no-files-found: warn
