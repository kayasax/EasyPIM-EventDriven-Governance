# SIMPLIFIED Azure Pipeline for EasyPIM - Focused on core functionality
# This bypasses complex authentication flows and uses direct approach

trigger: none

parameters:
- name: keyVaultName
  displayName: 'Key Vault Name'
  type: string
  default: 'kv-easypim-8368'
- name: configSecretName
  displayName: 'Configuration Secret Name'  
  type: string
  default: 'easypim-config-json'
- name: WhatIf
  displayName: 'Preview mode (WhatIf)'
  type: boolean
  default: false

pool: Default

variables:
- group: EasyPIM-EventDriven-Governance

jobs:
- job: EasyPIM_Execution
  displayName: 'EasyPIM Policy Orchestrator'
  timeoutInMinutes: 15
  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  - task: AzurePowerShell@5
    displayName: 'Execute EasyPIM Orchestrator'
    inputs:
      azureSubscription: 'EasyPIM-Azure-Connection'
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      failOnStandardError: false
      inlineScript: |
        $VerbosePreference = "Continue"
        $ErrorActionPreference = "Continue"
        
        Write-Host "üöÄ Starting EasyPIM execution..." -ForegroundColor Green
        Write-Host "üìã Parameters:" -ForegroundColor Cyan
        Write-Host "   Key Vault: ${{ parameters.keyVaultName }}" -ForegroundColor Gray
        Write-Host "   Secret: ${{ parameters.configSecretName }}" -ForegroundColor Gray
        Write-Host "   WhatIf: ${{ parameters.WhatIf }}" -ForegroundColor Gray
        
        # Test Azure PowerShell context
        $context = Get-AzContext
        if ($context) {
          Write-Host "‚úÖ Azure PowerShell authenticated" -ForegroundColor Green
          Write-Host "   Account: $($context.Account.Id)" -ForegroundColor Gray
          Write-Host "   Subscription: $($context.Subscription.Name)" -ForegroundColor Gray
        } else {
          throw "No Azure PowerShell context"
        }
        
        # Install EasyPIM module if not available
        Write-Host "üì¶ Checking EasyPIM module..." -ForegroundColor Cyan
        $easyPIM = Get-Module -ListAvailable -Name EasyPIM.Orchestrator
        if (-not $easyPIM) {
          Write-Host "Installing EasyPIM.Orchestrator..." -ForegroundColor Yellow
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -AllowClobber
        }
        
        # Import module
        Import-Module EasyPIM.Orchestrator -Force
        $easyPIMCommand = Get-Command -Name "Invoke-EasyPIMOrchestrator" -ErrorAction SilentlyContinue
        if ($easyPIMCommand) {
          Write-Host "‚úÖ EasyPIM command available" -ForegroundColor Green
        } else {
          throw "EasyPIM command not found after installation"
        }
        
        # Get Microsoft Graph token using Azure CLI (works better in Azure DevOps)
        Write-Host "üîê Getting Microsoft Graph token..." -ForegroundColor Cyan
        try {
          # Use az account get-access-token for Microsoft Graph
          $graphTokenResult = az account get-access-token --resource https://graph.microsoft.com --query "accessToken" -o tsv
          
          if ($graphTokenResult -and $graphTokenResult.Length -gt 100) {
            Write-Host "‚úÖ Graph token acquired" -ForegroundColor Green
            
            # Connect to Microsoft Graph
            Import-Module Microsoft.Graph.Authentication -Force -ErrorAction SilentlyContinue
            if (Get-Module Microsoft.Graph.Authentication) {
              $secureToken = ConvertTo-SecureString $graphTokenResult -AsPlainText -Force
              Connect-MgGraph -AccessToken $secureToken -NoWelcome
              Write-Host "‚úÖ Microsoft Graph connected" -ForegroundColor Green
            }
          }
        } catch {
          Write-Host "‚ö†Ô∏è Graph token failed, continuing anyway: $_" -ForegroundColor Yellow
        }
        
        # Execute EasyPIM
        Write-Host "üéØ Executing EasyPIM Orchestrator..." -ForegroundColor Green
        try {
          Invoke-EasyPIMOrchestrator -KeyVaultName '${{ parameters.keyVaultName }}' -SecretName '${{ parameters.configSecretName }}' -WhatIf:$${{ parameters.WhatIf }} -Mode 'delta' -Verbose
          Write-Host "‚úÖ EasyPIM execution completed!" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå EasyPIM execution failed: $_" -ForegroundColor Red
          Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
          
          # Don't fail the pipeline on EasyPIM errors for debugging
          Write-Host "‚ö†Ô∏è Continuing for debugging purposes..." -ForegroundColor Yellow
        }

  - task: PowerShell@2
    displayName: 'Generate Summary'
    condition: always()
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "üìä Pipeline Summary:" -ForegroundColor Green
        Write-Host "   Build: $(Build.BuildNumber)" -ForegroundColor Gray
        Write-Host "   Status: $(Agent.JobStatus)" -ForegroundColor Gray
        Write-Host "   Time: $(Get-Date)" -ForegroundColor Gray
