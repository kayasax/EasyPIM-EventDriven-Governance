# EasyPIM WORKING SOLUTION - Self-Hosted + Graph Token Auth
trigger: none

parameters:
- name: serviceConnection
  displayName: 'Azure Service Connection'
  type: string
  default: 'EasyPIM-Azure-Connection'

- name: keyVaultName
  displayName: 'Key Vault Name'
  type: string
  default: 'default'

- name: configSecretName
  displayName: 'Key Vault secret name containing PIM configuration'
  type: string
  default: 'default'

- name: WhatIf
  displayName: 'Preview mode - show what would be done without making changes'
  type: boolean
  default: false

- name: Mode
  displayName: 'Orchestrator execution mode'
  type: string
  default: 'delta'
  values:
  - delta
  - initial

variables:
- group: EasyPIM-EventDriven-Governance
- name: KEYVAULT_NAME
  ${{ if ne(parameters.keyVaultName, 'default') }}:
    value: ${{ parameters.keyVaultName }}
  ${{ else }}:
    value: $(AZURE_KEY_VAULT_NAME)
- name: SECRET_NAME
  ${{ if ne(parameters.configSecretName, 'default') }}:
    value: ${{ parameters.configSecretName }}
  ${{ else }}:
    value: $(EASYPIM_SECRET_NAME)

# USE SELF-HOSTED AGENT
pool:
  name: 'Default'

name: EasyPIM_Orchestrator_$(Date:yyyyMMdd)_$(Rev:r)

jobs:
- job: EasyPIMExecution
  displayName: 'üöÄ EasyPIM Execution'
  steps:

  # STEP 1: Install and Import EasyPIM
  - task: PowerShell@2
    displayName: 'üì¶ Install EasyPIM Module'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "ÔøΩ EASYPIM WORKING SOLUTION - $(Get-Date)" -ForegroundColor Green

        # Install EasyPIM.Orchestrator if not present
        if (-not (Get-Module -ListAvailable -Name EasyPIM.Orchestrator)) {
          Write-Host "üì¶ Installing EasyPIM.Orchestrator..." -ForegroundColor Yellow
          Install-Module -Name EasyPIM.Orchestrator -Force -AllowClobber -Scope CurrentUser
        }

        # Import the module
        Write-Host "ÔøΩ Importing EasyPIM.Orchestrator..." -ForegroundColor Yellow
        Import-Module EasyPIM.Orchestrator -Force

        Write-Host "‚úÖ EasyPIM module ready!" -ForegroundColor Green

  # STEP 2: AzurePowerShell Authentication + Graph Token + EasyPIM Execution
  - task: AzurePowerShell@5
    displayName: 'üîê Authentication + EasyPIM Execution'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      Inline: |
        Write-Host "ÔøΩ AUTHENTICATING WITH OIDC + GRAPH TOKEN..." -ForegroundColor Magenta

        # STEP 1: Verify ARM Context (Should work via OIDC)
        $context = Get-AzContext
        if ($context) {
          Write-Host "‚úÖ ARM Authentication SUCCESS!" -ForegroundColor Green
          Write-Host "   Account: $($context.Account.Id)"
          Write-Host "   Type: $($context.Account.Type)"
          Write-Host "   Subscription: $($context.Subscription.Name)"
          Write-Host "   Tenant: $($context.Tenant.Id)"
        } else {
          Write-Host "‚ùå ARM Authentication FAILED!" -ForegroundColor Red
          exit 1
        }

        # STEP 2: Microsoft Graph Authentication with Token
        Write-Host "üîê Connecting to Microsoft Graph..." -ForegroundColor Yellow
        try {
          # Get access token for Microsoft Graph from current Azure context
          $graphToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id, $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://graph.microsoft.com/").AccessToken

          if ($graphToken) {
            Write-Host "‚úÖ Graph token obtained!" -ForegroundColor Green

            # Connect using the token
            $secureToken = ConvertTo-SecureString $graphToken -AsPlainText -Force
            Connect-MgGraph -AccessToken $secureToken -NoWelcome

            $mgContext = Get-MgContext
            if ($mgContext) {
              Write-Host "‚úÖ Microsoft Graph Connected!" -ForegroundColor Green
              Write-Host "   Client ID: $($mgContext.ClientId)"
              Write-Host "   Tenant: $($mgContext.TenantId)"
            } else {
              throw "Microsoft Graph context not established"
            }
          } else {
            throw "Failed to obtain Graph token"
          }
        } catch {
          Write-Host "‚ùå Graph authentication failed: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

        # STEP 3: Execute EasyPIM Orchestrator
        Write-Host "üöÄ Executing EasyPIM Orchestrator..." -ForegroundColor Cyan
        try {
          # Fix boolean parameter handling
          $whatIfMode = "${{ parameters.WhatIf }}" -eq "True"

          $params = @{
            KeyVaultName = "$(KEYVAULT_NAME)"
            SecretName = "$(SECRET_NAME)"
            Mode = "${{ parameters.Mode }}"
            WhatIf = $whatIfMode
            Verbose = $true
          }

          Write-Host "üìã EasyPIM Parameters:" -ForegroundColor Yellow
          Write-Host "   KeyVault: $($params.KeyVaultName)"
          Write-Host "   SecretName: $($params.SecretName)"
          Write-Host "   Mode: $($params.Mode)"
          Write-Host "   WhatIf: $($params.WhatIf)"

          # Execute EasyPIM
          Invoke-EasyPIMOrchestrator @params

          Write-Host "üéâ EasyPIM execution completed successfully!" -ForegroundColor Green

        } catch {
          Write-Host "‚ùå EasyPIM execution failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
          exit 1
        }

        Write-Host "‚úÖ EASYPIM PIPELINE COMPLETED SUCCESSFULLY!" -ForegroundColor Green
