# EasyPIM Drift Detection - OIDC + Graph Token Auth
trigger: none

schedules:
- cron: "0 6 * * *" # Run daily at 6 AM UTC
  displayName: Daily drift detection
  branches:
    include:
    - main
  always: false # Only run if there are changes

parameters:
- name: serviceConnection
  displayName: 'Azure Service Connection'
  type: string
  default: 'EasyPIM-Azure-Connection'

- name: keyVaultName
  displayName: 'Key Vault Name'
  type: string
  default: 'default'

- name: configSecretName
  displayName: 'Key Vault secret name containing PIM configuration'
  type: string
  default: 'default'

- name: Verbose
  displayName: 'Enable verbose output'
  type: boolean
  default: false

variables:
- group: EasyPIM-EventDriven-Governance
- name: KEYVAULT_NAME
  ${{ if ne(parameters.keyVaultName, 'default') }}:
    value: ${{ parameters.keyVaultName }}
  ${{ else }}:
    value: $(AZURE_KEY_VAULT_NAME)
- name: SECRET_NAME
  ${{ if ne(parameters.configSecretName, 'default') }}:
    value: ${{ parameters.configSecretName }}
  ${{ else }}:
    value: $(EASYPIM_SECRET_NAME)

# USE SELF-HOSTED AGENT
pool:
  name: 'Default'

name: 'EasyPIM_DriftDetection_$(Build.Reason)_$(Date:yyyyMMdd)_$(Rev:r)'

jobs:
- job: DriftDetectionExecution
  displayName: 'PIM Policy Drift Detection - $(Build.Reason)'
  steps:

  # SINGLE STEP: AzurePowerShell Authentication + Module Installation + Graph Token + EasyPIM Drift Detection
  - task: AzurePowerShell@5
    displayName: 'ÔøΩ Complete Drift Detection Execution'
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      Inline: |
        Write-Host "ÔøΩ EASYPIM DRIFT DETECTION - COMPLETE EXECUTION..." -ForegroundColor Magenta

        # STEP 1: Install and Import EasyPIM Module
        Write-Host "üì¶ Installing EasyPIM.Orchestrator..." -ForegroundColor Yellow
        try {
          # Always update to the latest version of EasyPIM.Orchestrator
          Write-Host "üì¶ Updating EasyPIM.Orchestrator to latest version..." -ForegroundColor Yellow
          
          # Uninstall any existing versions to ensure clean install
          $existingModules = Get-Module -ListAvailable -Name EasyPIM.Orchestrator
          if ($existingModules) {
            Write-Host "üîÑ Found existing EasyPIM.Orchestrator versions:" -ForegroundColor Cyan
            foreach ($module in $existingModules) {
              Write-Host "   - Version: $($module.Version) at $($module.ModuleBase)" -ForegroundColor Gray
            }
            Write-Host "üóëÔ∏è Removing existing versions..." -ForegroundColor Yellow
            try {
              Uninstall-Module -Name EasyPIM.Orchestrator -AllVersions -Force -ErrorAction SilentlyContinue
            } catch {
              Write-Host "‚ö†Ô∏è Could not uninstall some versions (may be in use): $($_.Exception.Message)" -ForegroundColor Yellow
            }
          }
          
          # Install the latest version
          Write-Host "‚¨áÔ∏è Installing latest EasyPIM.Orchestrator..." -ForegroundColor Yellow
          Install-Module -Name EasyPIM.Orchestrator -Force -AllowClobber -Scope CurrentUser -Repository PSGallery
          
          # Import the module
          Write-Host "üì• Importing EasyPIM.Orchestrator..." -ForegroundColor Yellow
          Import-Module EasyPIM.Orchestrator -Force
          
          # Verify module is loaded
          $module = Get-Module -Name EasyPIM.Orchestrator
          if ($module) {
            Write-Host "‚úÖ EasyPIM.Orchestrator v$($module.Version) ready!" -ForegroundColor Green
            Write-Host "ÔøΩ Module Path: $($module.ModuleBase)" -ForegroundColor Gray
          } else {
            throw "Failed to load EasyPIM.Orchestrator module"
          }
        } catch {
          Write-Host "‚ùå Failed to install/import EasyPIM.Orchestrator: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

        # STEP 2: Verify ARM Context (Should work via OIDC)
        $context = Get-AzContext
        if ($context) {
          Write-Host "‚úÖ ARM Authentication SUCCESS!" -ForegroundColor Green
          Write-Host "   Account: $($context.Account.Id)"
          Write-Host "   Type: $($context.Account.Type)"
          Write-Host "   Subscription: $($context.Subscription.Name)"
          Write-Host "   Tenant: $($context.Tenant.Id)"
        } else {
          Write-Host "‚ùå ARM Authentication FAILED!" -ForegroundColor Red
          exit 1
        }

        # STEP 3: Microsoft Graph Authentication with Token
        Write-Host "üîê Connecting to Microsoft Graph..." -ForegroundColor Yellow
        try {
          # Get access token for Microsoft Graph from current Azure context
          $graphToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id, $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://graph.microsoft.com/").AccessToken

          if ($graphToken) {
            Write-Host "‚úÖ Graph token obtained!" -ForegroundColor Green

            # Connect using the token
            $secureToken = ConvertTo-SecureString $graphToken -AsPlainText -Force
            Connect-MgGraph -AccessToken $secureToken -NoWelcome

            $mgContext = Get-MgContext
            if ($mgContext) {
              Write-Host "‚úÖ Microsoft Graph Connected!" -ForegroundColor Green
              Write-Host "   Client ID: $($mgContext.ClientId)"
              Write-Host "   Tenant: $($mgContext.TenantId)"
            } else {
              throw "Microsoft Graph context not established"
            }
          } else {
            throw "Failed to obtain Graph token"
          }
        } catch {
          Write-Host "‚ùå Graph authentication failed: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

        # STEP 4: Execute EasyPIM Drift Detection
        Write-Host "üîç Executing EasyPIM Drift Detection..." -ForegroundColor Cyan
        
        # Display execution context
        $verboseModeDisplay = if ("${{ parameters.Verbose }}" -eq "True") { "VERBOSE" } else { "STANDARD" }
        Write-Host "üéØ Drift Detection Mode: $verboseModeDisplay" -ForegroundColor Magenta
        Write-Host "üîß Trigger: $(Build.Reason)" -ForegroundColor Magenta
        
        # Display version information for troubleshooting
        Write-Host "üìã Component Versions:" -ForegroundColor Cyan
        try {
          $easyPimModule = Get-Module -Name EasyPIM.Orchestrator
          if ($easyPimModule) {
            Write-Host "   EasyPIM.Orchestrator: v$($easyPimModule.Version)" -ForegroundColor Gray
          }
          
          $azModule = Get-Module -Name Az.Accounts
          if ($azModule) {
            Write-Host "   Az.Accounts: v$($azModule.Version)" -ForegroundColor Gray
          }
          
          $mgModule = Get-Module -Name Microsoft.Graph.Authentication
          if ($mgModule) {
            Write-Host "   Microsoft.Graph.Authentication: v$($mgModule.Version)" -ForegroundColor Gray
          }
          
          Write-Host "   PowerShell: v$($PSVersionTable.PSVersion)" -ForegroundColor Gray
        } catch {
          Write-Host "‚ö†Ô∏è Could not retrieve all version information" -ForegroundColor Yellow
        }
        
        try {
          # Fix boolean parameter handling
          $verboseMode = "${{ parameters.Verbose }}" -eq "True"

          $params = @{
            KeyVaultName = "$(KEYVAULT_NAME)"
            SecretName = "$(SECRET_NAME)"
            TenantId = $context.Tenant.Id
            SubscriptionId = $context.Subscription.Id
            Verbose = $verboseMode
          }

          Write-Host "üìã Drift Detection Parameters:" -ForegroundColor Yellow
          Write-Host "   KeyVault: $($params.KeyVaultName)"
          Write-Host "   SecretName: $($params.SecretName)"
          Write-Host "   TenantId: $($params.TenantId)"
          Write-Host "   SubscriptionId: $($params.SubscriptionId)"
          Write-Host "   Verbose: $($params.Verbose)"

          # Execute EasyPIM Drift Detection
          Write-Host "üîç Executing Test-PIMPolicyDrift..." -ForegroundColor Yellow
          $driftResult = Test-PIMPolicyDrift @params
          
          # Capture and analyze drift results
          Write-Host "üìä Processing drift detection results..." -ForegroundColor Yellow
          Write-Host "Raw Result Type: $($driftResult.GetType().FullName)" -ForegroundColor Gray
          
          # Initialize result variables
          $driftCount = 0
          $policiesChecked = 0
          $driftDetails = @()
          $hasStructuredResults = $false
          
          # Try to parse structured results
          if ($driftResult) {
            Write-Host "üìã Drift Result Content:" -ForegroundColor Cyan
            
            # Handle array of results (System.Object[])
            if ($driftResult -is [array] -and $driftResult.Count -gt 0) {
              Write-Host "   Array Results Found: $($driftResult.Count) items" -ForegroundColor Green
              $hasStructuredResults = $true
              $policiesChecked = $driftResult.Count
              
              # Analyze each result item for drift status
              $driftItems = @()
              foreach ($item in $driftResult) {
                if ($item -and $item.PSObject.Properties) {
                  # Check for common drift status properties
                  $isDrift = $false
                  $itemDescription = ""
                  
                  # Try different property names for drift status
                  if ($item.Status -eq 'Drift' -or $item.Status -eq 'DRIFT') { $isDrift = $true }
                  if ($item.IsDrift -eq $true) { $isDrift = $true }
                  if ($item.HasDrift -eq $true) { $isDrift = $true }
                  if ($item.Drifted -eq $true) { $isDrift = $true }
                  
                  # Build description from available properties
                  if ($item.Type) { $itemDescription += "[$($item.Type)] " }
                  if ($item.Name) { $itemDescription += "$($item.Name) " }
                  if ($item.Target) { $itemDescription += "($($item.Target)) " }
                  if ($item.Status) { $itemDescription += "- Status: $($item.Status) " }
                  if ($item.Differences) { $itemDescription += "- Changes: $($item.Differences)" }
                  
                  if ($isDrift) {
                    $driftCount++
                    $driftItems += $itemDescription.Trim()
                  }
                  
                  Write-Host "   Item: $($itemDescription.Trim())" -ForegroundColor $(if ($isDrift) { 'Yellow' } else { 'Gray' })
                } elseif ($item -and $item.ToString().Trim() -ne "") {
                  # Handle string items
                  $itemStr = $item.ToString().Trim()
                  if ($itemStr -match "(drift|violation|mismatch|different)" -or $itemStr.Contains("!=")) {
                    $driftCount++
                    $driftItems += $itemStr
                    Write-Host "   Drift Item: $itemStr" -ForegroundColor Yellow
                  } else {
                    Write-Host "   Item: $itemStr" -ForegroundColor Gray
                  }
                }
              }
              
              $driftDetails = $driftItems
              Write-Host "   Analysis Complete:" -ForegroundColor Green
              Write-Host "   - Policies Checked: $policiesChecked" -ForegroundColor Gray
              Write-Host "   - Drift Count: $driftCount" -ForegroundColor Gray
              Write-Host "   - Drift Details: $($driftDetails.Count) items" -ForegroundColor Gray
              
            } elseif ($driftResult -is [hashtable] -or $driftResult.PSObject.Properties) {
              # Handle hashtable or custom object
              $hasStructuredResults = $true
              
              # Try common property names for drift results
              if ($driftResult.DriftCount -ne $null) { $driftCount = $driftResult.DriftCount }
              if ($driftResult.PoliciesChecked -ne $null) { $policiesChecked = $driftResult.PoliciesChecked }
              if ($driftResult.TotalCount -ne $null) { $policiesChecked = $driftResult.TotalCount }
              if ($driftResult.Count -ne $null -and $policiesChecked -eq 0) { $policiesChecked = $driftResult.Count }
              if ($driftResult.DriftItems) { $driftDetails = $driftResult.DriftItems }
              if ($driftResult.Drifts) { $driftDetails = $driftResult.Drifts }
              
              Write-Host "   Structured Results Found:" -ForegroundColor Green
              Write-Host "   - Policies Checked: $policiesChecked" -ForegroundColor Gray
              Write-Host "   - Drift Count: $driftCount" -ForegroundColor Gray
              
              # Display drift details if available
              if ($driftDetails -and $driftDetails.Count -gt 0) {
                Write-Host "   - Drift Details: $($driftDetails.Count) items" -ForegroundColor Gray
                foreach ($drift in $driftDetails) {
                  if ($drift -and $drift.ToString().Trim() -ne "") {
                    Write-Host "     * $($drift.ToString().Trim())" -ForegroundColor Yellow
                  }
                }
              }
            } else {
              # Handle string or other output formats
              $resultString = $driftResult.ToString()
              Write-Host "   Raw Output: $resultString" -ForegroundColor Gray
              
              # Try to extract information from string output
              if ($resultString -match "(\d+)\s*(drift|violation|issue)s?\s*found") {
                $driftCount = [int]$Matches[1]
                Write-Host "   Extracted Drift Count from text: $driftCount" -ForegroundColor Yellow
              }
              
              if ($resultString -match "(\d+)\s*(polic|rule)ies?\s*(checked|analyzed)") {
                $policiesChecked = [int]$Matches[1]
                Write-Host "   Extracted Policies Checked from text: $policiesChecked" -ForegroundColor Yellow
              }
              
              # Look for "All compared policy fields match" pattern
              if ($resultString -match "All compared policy fields match") {
                Write-Host "   All policies match - no drift detected" -ForegroundColor Green
                if ($policiesChecked -eq 0) {
                  # Estimate policy count from context if available
                  $policiesChecked = 1  # At least one policy was checked if we got this message
                }
              }
            }
          } else {
            Write-Host "‚ö†Ô∏è No drift result returned from Test-PIMPolicyDrift" -ForegroundColor Yellow
          }
          
          # Store results for dashboard and artifacts
          $global:DriftResults = @{
            DriftCount = $driftCount
            PoliciesChecked = $policiesChecked
            DriftDetails = $driftDetails
            HasStructuredResults = $hasStructuredResults
            RawResult = $driftResult
            ExecutionSuccess = $true
          }
          
          Write-Host "üéâ EasyPIM drift detection completed successfully!" -ForegroundColor Green

        } catch {
          Write-Host "‚ùå EasyPIM drift detection failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
          exit 1
        }

        # STEP 5: Generate Azure DevOps Summary Dashboard
        Write-Host "" -ForegroundColor White
        Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
        Write-Host "                    üîç EasyPIM Drift Detection Dashboard" -ForegroundColor Cyan
        Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Cyan
        Write-Host "" -ForegroundColor White

        # Create structured output for Azure DevOps
        $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
        $buildNumber = "$(Build.BuildNumber)"
        $triggerType = "$(Build.Reason)"
        
        # Execution Overview Table
        Write-Host "üéØ Execution Overview" -ForegroundColor Yellow
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
        Write-Host "‚îÇ Status          ‚îÇ üü¢ COMPLETED                                 ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Mode            ‚îÇ üîç DRIFT DETECTION                           ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Trigger         ‚îÇ üìã $triggerType                              ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Timestamp       ‚îÇ üïí $timestamp                        ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
        Write-Host "" -ForegroundColor White

        # Drift Detection Results
        Write-Host "üìã Drift Detection Results" -ForegroundColor Yellow
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
        
        # Use captured drift results
        try {
          if ($global:DriftResults) {
            $driftCount = $global:DriftResults.DriftCount
            $policiesChecked = $global:DriftResults.PoliciesChecked
            
            # Ensure we show at least 1 policy checked if we got results
            if ($policiesChecked -eq 0 -and $global:DriftResults.ExecutionSuccess) {
              $policiesChecked = "1+"
            }
            
            Write-Host "‚îÇ Policies Checked‚îÇ $($policiesChecked.ToString().PadLeft(8)) ‚îÇ" -ForegroundColor Gray
            Write-Host "‚îÇ Drift Found     ‚îÇ $($driftCount.ToString().PadLeft(8)) ‚îÇ" -ForegroundColor Gray
            
            if ($driftCount -gt 0) {
              Write-Host "‚îÇ Status          ‚îÇ ‚ö†Ô∏è DRIFT   ‚îÇ" -ForegroundColor Yellow
            } else {
              Write-Host "‚îÇ Status          ‚îÇ ‚úÖ Clean  ‚îÇ" -ForegroundColor Green
            }
            
            # Show drift details if available
            if ($global:DriftResults.DriftDetails -and $global:DriftResults.DriftDetails.Count -gt 0) {
              $nonEmptyDetails = $global:DriftResults.DriftDetails | Where-Object { $_ -and $_.ToString().Trim() -ne "" }
              if ($nonEmptyDetails -and $nonEmptyDetails.Count -gt 0) {
                Write-Host "‚îÇ Details         ‚îÇ Available ‚îÇ" -ForegroundColor Gray
              } else {
                Write-Host "‚îÇ Details         ‚îÇ All Clean ‚îÇ" -ForegroundColor Gray
              }
            } else {
              Write-Host "‚îÇ Details         ‚îÇ All Clean ‚îÇ" -ForegroundColor Gray
            }
          } else {
            # Fallback if global results not available
            Write-Host "‚îÇ Execution       ‚îÇ ‚úÖ Success‚îÇ" -ForegroundColor Gray
            Write-Host "‚îÇ Status          ‚îÇ Completed ‚îÇ" -ForegroundColor Gray
            Write-Host "‚îÇ Results         ‚îÇ See Logs  ‚îÇ" -ForegroundColor Gray
          }
        } catch {
          Write-Host "‚îÇ Execution       ‚îÇ ‚úÖ Success‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Status          ‚îÇ Completed ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Results         ‚îÇ See Logs  ‚îÇ" -ForegroundColor Gray
        }
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
        Write-Host "" -ForegroundColor White

        # Configuration Table
        Write-Host "‚öôÔ∏è Configuration" -ForegroundColor Yellow
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
        Write-Host "‚îÇ Key Vault       ‚îÇ $($params.KeyVaultName.PadRight(44)) ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Secret Name     ‚îÇ $($params.SecretName.PadRight(44)) ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Service Conn    ‚îÇ ${{ parameters.serviceConnection }}$(' ' * (44 - '${{ parameters.serviceConnection }}'.Length)) ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Agent Pool      ‚îÇ Default (Self-hosted)$(' ' * 27) ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
        Write-Host "" -ForegroundColor White

        # Component Versions Table
        Write-Host "üì¶ Component Versions" -ForegroundColor Yellow
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
        try {
          $easyPimModule = Get-Module -Name EasyPIM.Orchestrator
          $azModule = Get-Module -Name Az.Accounts
          $mgModule = Get-Module -Name Microsoft.Graph.Authentication
          
          $easyPimVer = if ($easyPimModule) { "v$($easyPimModule.Version)" } else { "Not loaded" }
          $azVer = if ($azModule) { "v$($azModule.Version)" } else { "Not loaded" }
          $mgVer = if ($mgModule) { "v$($mgModule.Version)" } else { "Not loaded" }
          $psVer = "v$($PSVersionTable.PSVersion)"
          
          Write-Host "‚îÇ EasyPIM.Orchestrator        ‚îÇ $($easyPimVer.PadRight(14)) ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Az.Accounts                 ‚îÇ $($azVer.PadRight(14)) ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ Microsoft.Graph.Auth        ‚îÇ $($mgVer.PadRight(14)) ‚îÇ" -ForegroundColor Gray
          Write-Host "‚îÇ PowerShell                  ‚îÇ $($psVer.PadRight(14)) ‚îÇ" -ForegroundColor Gray
        } catch {
          Write-Host "‚îÇ Version Info                ‚îÇ ‚ö†Ô∏è Unavailable  ‚îÇ" -ForegroundColor Gray
        }
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
        Write-Host "" -ForegroundColor White

        # Authentication Status
        Write-Host "üîê Authentication Status" -ForegroundColor Yellow
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor Gray
        Write-Host "‚îÇ Azure Resource Manager      ‚îÇ ‚úÖ Connected   ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Microsoft Graph API         ‚îÇ ‚úÖ Connected   ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Tenant ID                   ‚îÇ $(($context.Tenant.Id).Substring(0,14)).. ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îÇ Subscription                ‚îÇ $(($context.Subscription.Name).Substring(0, [Math]::Min(14, $context.Subscription.Name.Length)).PadRight(14)) ‚îÇ" -ForegroundColor Gray
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor Gray
        Write-Host "" -ForegroundColor White

        # Final Status Banner
        $statusIcon = "üîç"
        $statusText = "DRIFT DETECTION COMPLETED SUCCESSFULLY"
        $statusColor = "Green"
        
        Write-Host "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" -ForegroundColor $statusColor
        Write-Host "‚îÇ                    $statusIcon $statusText                  ‚îÇ" -ForegroundColor $statusColor
        Write-Host "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" -ForegroundColor $statusColor

        # Azure DevOps Pipeline Summary - Set pipeline variables for dashboard
        Write-Host "##vso[task.setvariable variable=EasyPIM.DriftDetectionMode]$($params.Verbose)"
        Write-Host "##vso[task.setvariable variable=EasyPIM.TriggerType]$triggerType"
        Write-Host "##vso[task.setvariable variable=EasyPIM.Status]Success"
        Write-Host "##vso[task.setvariable variable=EasyPIM.Timestamp]$timestamp"
        
        # Export drift results for artifact generation
        if ($global:DriftResults) {
          $driftSummaryPath = "./drift-summary.json"
          $global:DriftResults | ConvertTo-Json -Depth 5 | Out-File -FilePath $driftSummaryPath -Encoding UTF8
          Write-Host "üìÑ Drift results exported to: $driftSummaryPath" -ForegroundColor Green
          
          # Also create a detailed drift report
          $detailedReportPath = "./drift-detailed-report.txt"
          $reportLines = @()
          $reportLines += "EasyPIM Drift Detection - Detailed Report"
          $reportLines += "========================================"
          $reportLines += "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
          $reportLines += "Build: $(Build.BuildNumber)"
          $reportLines += ""
          $reportLines += "SUMMARY:"
          $reportLines += "- Policies Checked: $($global:DriftResults.PoliciesChecked)"
          $reportLines += "- Drift Items Found: $($global:DriftResults.DriftCount)"
          $reportLines += "- Execution Status: Success"
          $reportLines += ""
          
          if ($global:DriftResults.DriftDetails -and $global:DriftResults.DriftDetails.Count -gt 0) {
            $reportLines += "DRIFT DETAILS:"
            foreach ($drift in $global:DriftResults.DriftDetails) {
              $reportLines += "- $drift"
            }
          } else {
            $reportLines += "DRIFT DETAILS: No policy drifts detected"
          }
          
          $reportLines += ""
          $reportLines += "RAW RESULTS:"
          $reportLines += $global:DriftResults.RawResult.ToString()
          
          $reportLines -join "`r`n" | Out-File -FilePath $detailedReportPath -Encoding UTF8
          Write-Host "üìÑ Detailed drift report exported to: $detailedReportPath" -ForegroundColor Green
        }

        # Set task completion with summary
        $driftStatus = if ($global:DriftResults -and $global:DriftResults.DriftCount -gt 0) { "drift detected" } else { "policy compliance verified" }
        $summaryMessage = "EasyPIM drift detection completed - $driftStatus"
        Write-Host "##vso[task.complete result=Succeeded;]$summaryMessage"

        Write-Host "‚úÖ EASYPIM DRIFT DETECTION PIPELINE COMPLETED SUCCESSFULLY!" -ForegroundColor Green

  # STEP 2: Publish Execution Logs as Artifacts
  - task: PowerShell@2
    displayName: 'üìÅ Generate Drift Detection Artifacts'
    condition: always()
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "üìÅ Generating drift detection artifacts..." -ForegroundColor Cyan
        
        # Create logs directory structure
        $artifactsDir = "$(Build.ArtifactStagingDirectory)"
        $logsDir = "$artifactsDir/drift-logs"
        $resultsDir = "$artifactsDir/drift-results"
        
        New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
        New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
        
        Write-Host "üìÇ Artifact directories created:" -ForegroundColor Yellow
        Write-Host "   - Logs: $logsDir" -ForegroundColor Gray
        Write-Host "   - Results: $resultsDir" -ForegroundColor Gray
        
        # Create summary log file
        $timestamp = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'
        $summaryFile = "$logsDir/easypim-drift-detection-summary-$timestamp.log"
        
        # Generate detailed execution summary using array approach
        $verbose = "${{ parameters.Verbose }}"
        $serviceConn = "${{ parameters.serviceConnection }}"
        $pipelineName = "$(Build.DefinitionName)"
        $buildNumber = "$(Build.BuildNumber)"
        $buildReason = "$(Build.Reason)"
        $agentName = "$(Agent.Name)"
        $sourceBranch = "$(Build.SourceBranch)"
        $sourceVersion = "$(Build.SourceVersion)"
        $requestedBy = "$(Build.RequestedFor)"
        $buildUrl = "$(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
        $keyVault = "$(KEYVAULT_NAME)"
        $secretName = "$(SECRET_NAME)"
        $jobStatus = "$(Agent.JobStatus)"
        $currentTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
        
        # Build log content as array to avoid here-string issues
        $logLines = @()
        $logLines += "============================================================================="
        $logLines += "EasyPIM Drift Detection - Execution Summary"
        $logLines += "============================================================================="
        $logLines += "Pipeline: $pipelineName"
        $logLines += "Build: $buildNumber"
        $logLines += "Date: $currentTime"
        $logLines += "Agent: $agentName"
        $logLines += ""
        $logLines += "PARAMETERS:"
        $logLines += "- Verbose: $verbose"
        $logLines += "- Service Connection: $serviceConn"
        $logLines += "- Key Vault: $keyVault"
        $logLines += "- Secret Name: $secretName"
        $logLines += ""
        $logLines += "PIPELINE DETAILS:"
        $logLines += "- Trigger: $buildReason"
        $logLines += "- Source Branch: $sourceBranch"
        $logLines += "- Source Version: $sourceVersion"
        $logLines += "- Requested By: $requestedBy"
        $logLines += "- Build URL: $buildUrl"
        $logLines += ""
        $logLines += "EXECUTION CONTEXT:"
        $logLines += "- Detection Mode: Drift Detection"
        $logLines += "- Verbose Mode: $verbose"
        $logLines += "- Agent Status: $jobStatus"
        $logLines += ""
        $logLines += "ARTIFACTS GENERATED:"
        $logLines += "- Summary Log: easypim-drift-detection-summary-$timestamp.log"
        $logLines += "- Metadata File: drift-metadata.json"
        $logLines += "- Full Pipeline Logs: Available in Azure DevOps pipeline logs"
        $logLines += "============================================================================="
        
        # Write summary to file
        $logLines -join "`r`n" | Out-File -FilePath $summaryFile -Encoding UTF8
        Write-Host "‚úÖ Drift detection summary log created: $summaryFile" -ForegroundColor Green
        
        # Create a metadata file for the execution using hashtable approach
        $metadataFile = "$logsDir/drift-metadata.json"
        $metadata = @{
            PipelineName = $pipelineName
            BuildNumber = $buildNumber
            BuildId = "$(Build.BuildId)"
            Timestamp = (Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')
            Parameters = @{
                Verbose = $verbose
                ServiceConnection = $serviceConn
                KeyVault = $keyVault
                SecretName = $secretName
            }
            Trigger = $buildReason
            RequestedBy = $requestedBy
            SourceBranch = $sourceBranch
            SourceVersion = $sourceVersion
            JobType = "DriftDetection"
        } | ConvertTo-Json -Depth 3
        
        $metadata | Out-File -FilePath $metadataFile -Encoding UTF8
        Write-Host "‚úÖ Drift detection metadata file created: $metadataFile" -ForegroundColor Green
        
        # Check for and preserve any drift-specific results
        Write-Host "üìã Collecting drift detection results..." -ForegroundColor Yellow
        
        # Copy drift summary JSON if it exists
        if (Test-Path './drift-summary.json') {
            Copy-Item './drift-summary.json' -Destination "$resultsDir/drift-summary-$timestamp.json" -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Drift summary results preserved: drift-summary-$timestamp.json" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è drift-summary.json not found in current directory" -ForegroundColor Yellow
            Write-Host "üìÇ Current directory contents:" -ForegroundColor Gray
            Get-ChildItem -Path . | ForEach-Object { Write-Host "   - $($_.Name)" -ForegroundColor Gray }
        }
        
        # Copy detailed drift report if it exists
        if (Test-Path './drift-detailed-report.txt') {
            Copy-Item './drift-detailed-report.txt' -Destination "$resultsDir/drift-detailed-report-$timestamp.txt" -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Detailed drift report preserved: drift-detailed-report-$timestamp.txt" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è drift-detailed-report.txt not found in current directory" -ForegroundColor Yellow
        }
        
        # Create a dashboard summary file
        $dashboardFile = "$resultsDir/drift-dashboard-$timestamp.txt"
        $dashboardContent = @()
        $dashboardContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        $dashboardContent += "                    üîç EasyPIM Drift Detection Dashboard"
        $dashboardContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        $dashboardContent += ""
        $dashboardContent += "üéØ Execution Overview"
        $dashboardContent += "Build: $(Build.BuildNumber)"
        $dashboardContent += "Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
        $dashboardContent += "Trigger: $(Build.Reason)"
        $dashboardContent += "Status: COMPLETED"
        $dashboardContent += ""
        $dashboardContent += "‚öôÔ∏è Configuration"
        $dashboardContent += "Key Vault: $(KEYVAULT_NAME)"
        $dashboardContent += "Secret Name: $(SECRET_NAME)"
        $dashboardContent += "Service Connection: ${{ parameters.serviceConnection }}"
        $dashboardContent += "Verbose Mode: ${{ parameters.Verbose }}"
        $dashboardContent += ""
        $dashboardContent += "üìã Artifact Files Generated:"
        $dashboardContent += "- Summary Log: easypim-drift-detection-summary-$timestamp.log"
        $dashboardContent += "- Metadata File: drift-metadata.json"
        $dashboardContent += "- Dashboard Summary: drift-dashboard-$timestamp.txt"
        if (Test-Path './drift-summary.json') {
            $dashboardContent += "- Drift Results: drift-summary-$timestamp.json"
        }
        if (Test-Path './drift-detailed-report.txt') {
            $dashboardContent += "- Detailed Report: drift-detailed-report-$timestamp.txt"
        }
        $dashboardContent += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        
        $dashboardContent -join "`r`n" | Out-File -FilePath $dashboardFile -Encoding UTF8
        Write-Host "‚úÖ Dashboard summary created: $dashboardFile" -ForegroundColor Green
        
        # List all files created
        Write-Host "üìã Drift detection artifact files created:" -ForegroundColor Yellow
        Write-Host "üìÅ Logs Directory:" -ForegroundColor Cyan
        if (Test-Path $logsDir) {
            Get-ChildItem -Path $logsDir | ForEach-Object {
                Write-Host "   - $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)" -ForegroundColor Gray
            }
        }
        Write-Host "üìÅ Results Directory:" -ForegroundColor Cyan
        if (Test-Path $resultsDir) {
            Get-ChildItem -Path $resultsDir | ForEach-Object {
                Write-Host "   - $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)" -ForegroundColor Gray
            }
        }
        
        Write-Host "üì§ Artifacts will be published to Azure DevOps under:" -ForegroundColor Magenta
        Write-Host "   Build Artifacts > EasyPIM-DriftDetection-Logs-$(Build.BuildNumber)" -ForegroundColor Magenta

  - task: PublishBuildArtifacts@1
    displayName: 'üì§ Publish Drift Detection Artifacts'
    condition: always()
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'EasyPIM-DriftDetection-Logs-$(Build.BuildNumber)'
      publishLocation: 'Container'
