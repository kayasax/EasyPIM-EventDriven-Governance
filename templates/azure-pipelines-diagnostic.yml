# DIAGNOSTIC Pipeline - Minimal test to identify the exact issue
# This will show us exactly where the failure occurs

trigger: none

parameters:
- name: serviceConnection
  displayName: 'Azure Service Connection'
  type: string
  default: 'EasyPIM-Azure-Connection'

variables:
- name: SERVICE_CONNECTION_NAME
  value: ${{ parameters.serviceConnection }}

pool: Default

jobs:
- job: DiagnosticTest
  displayName: 'Diagnostic Test'
  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  - task: AzurePowerShell@5
    displayName: 'Test 1: Basic PowerShell Execution'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION_NAME)
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      inlineScript: |
        Write-Host "TEST 1: Basic PowerShell execution working" -ForegroundColor Green
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan
        Write-Host "Current Date: $(Get-Date)" -ForegroundColor Cyan
        Write-Host "✅ Inline script execution confirmed" -ForegroundColor Green

  - task: AzurePowerShell@5
    displayName: 'Test 2: Azure Context Check'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION_NAME)
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      inlineScript: |
        Write-Host "TEST 2: Azure PowerShell context" -ForegroundColor Green
        $context = Get-AzContext
        if ($context) {
          Write-Host "✅ Azure context exists" -ForegroundColor Green
          Write-Host "   Account: $($context.Account.Id)" -ForegroundColor Cyan
          Write-Host "   Subscription: $($context.Subscription.Name)" -ForegroundColor Cyan
          Write-Host "   Tenant: $($context.Tenant.Id)" -ForegroundColor Cyan
        } else {
          Write-Host "❌ No Azure context found" -ForegroundColor Red
        }

  - task: AzurePowerShell@5
    displayName: 'Test 3: Simple Module Install'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION_NAME)
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      inlineScript: |
        Write-Host "TEST 3: Module installation" -ForegroundColor Green
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Az.Resources -Force -Scope CurrentUser -AllowClobber
        $module = Get-Module -ListAvailable -Name Az.Resources
        if ($module) {
          Write-Host "✅ Module installation working" -ForegroundColor Green
          Write-Host "   Az.Resources version: $($module.Version)" -ForegroundColor Cyan
        } else {
          Write-Host "❌ Module installation failed" -ForegroundColor Red
        }

  - task: AzurePowerShell@5
    displayName: 'Test 4: EasyPIM Module Test'
    inputs:
      azureSubscription: $(SERVICE_CONNECTION_NAME)
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      failOnStandardError: false
      inlineScript: |
        Write-Host "TEST 4: EasyPIM module installation" -ForegroundColor Green
        try {
          Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -AllowClobber
          $module = Get-Module -ListAvailable -Name EasyPIM.Orchestrator
          if ($module) {
            Write-Host "✅ EasyPIM.Orchestrator installed successfully" -ForegroundColor Green
            Write-Host "   Version: $($module.Version)" -ForegroundColor Cyan
            
            Import-Module EasyPIM.Orchestrator -Force
            $command = Get-Command -Name "Invoke-EasyPIMOrchestrator" -ErrorAction SilentlyContinue
            if ($command) {
              Write-Host "✅ Invoke-EasyPIMOrchestrator command available" -ForegroundColor Green
              Write-Host "   Module: $($command.ModuleName)" -ForegroundColor Cyan
            } else {
              Write-Host "❌ Invoke-EasyPIMOrchestrator command not found" -ForegroundColor Red
            }
          } else {
            Write-Host "❌ EasyPIM.Orchestrator not found after installation" -ForegroundColor Red
          }
        } catch {
          Write-Host "❌ EasyPIM installation failed: $_" -ForegroundColor Red
        }

  - task: PowerShell@2
    displayName: 'Test 5: Regular PowerShell Task'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        Write-Host "TEST 5: Regular PowerShell task (non-Azure)" -ForegroundColor Green
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Cyan
        Write-Host "✅ Regular PowerShell execution confirmed" -ForegroundColor Green
