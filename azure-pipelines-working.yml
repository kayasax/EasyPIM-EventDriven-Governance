# WORKING EASYPIM PIPELINE - Uses PowerShell@2 + Manual Authentication
trigger: none

parameters:
- name: serviceConnection
  displayName: 'Azure Service Connection'
  type: string
  default: 'EasyPIM-Azure-Connection'

- name: keyVaultName
  displayName: 'Key Vault Name'
  type: string
  default: 'default'

- name: configSecretName
  displayName: 'Key Vault secret name containing PIM configuration'
  type: string
  default: 'default'

- name: WhatIf
  displayName: 'Preview mode - show what would be done without making changes'
  type: boolean
  default: false

- name: Mode
  displayName: 'Orchestrator execution mode'
  type: string
  default: 'delta'
  values:
  - delta
  - initial

variables:
- group: EasyPIM-EventDriven-Governance
- name: KEYVAULT_NAME
  ${{ if ne(parameters.keyVaultName, 'default') }}:
    value: ${{ parameters.keyVaultName }}
  ${{ else }}:
    value: $(AZURE_KEY_VAULT_NAME)
- name: SECRET_NAME
  ${{ if ne(parameters.configSecretName, 'default') }}:
    value: ${{ parameters.configSecretName }}
  ${{ else }}:
    value: $(EASYPIM_SECRET_NAME)

pool: Default  # Self-hosted agent pool

name: EasyPIM_Working_$(Date:yyyyMMdd)_$(Rev:r)

stages:
- stage: EasyPIMExecution
  displayName: 'EasyPIM Policy Execution'
  jobs:
  - job: ExecuteEasyPIM
    displayName: 'Execute EasyPIM Orchestrator'
    timeoutInMinutes: 30
    steps:
    - checkout: self
      displayName: 'Checkout Repository'

    # Use PowerShell@2 instead of AzurePowerShell@5
    - task: PowerShell@2
      displayName: 'Execute EasyPIM with Manual Authentication'
      inputs:
        targetType: 'inline'
        pwsh: true
        failOnStandardError: false
        script: |
          Write-Output "üöÄ EASYPIM PIPELINE STARTING - $(Get-Date)"
          Write-Host "üöÄ EASYPIM PIPELINE STARTING - $(Get-Date)" -ForegroundColor Green
          
          try {
            # Enable verbose output
            $VerbosePreference = "Continue"
            
            Write-Output "üìã Configuration:"
            Write-Output "   Key Vault: $(KEYVAULT_NAME)"
            Write-Output "   Secret: $(SECRET_NAME)"
            Write-Output "   Mode: ${{ parameters.Mode }}"
            Write-Output "   WhatIf: ${{ parameters.WhatIf }}"
            
            # Step 1: Install EasyPIM module if not already installed
            Write-Output "üì¶ STEP 1: Installing EasyPIM.Orchestrator module..."
            Write-Host "üì¶ STEP 1: Installing EasyPIM.Orchestrator module..." -ForegroundColor Yellow
            
            $existing = Get-Module -Name EasyPIM.Orchestrator -ListAvailable -ErrorAction SilentlyContinue
            if (-not $existing) {
              Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
              Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -AllowClobber
              Write-Output "‚úÖ EasyPIM.Orchestrator installed successfully"
            } else {
              Write-Output "‚úÖ EasyPIM.Orchestrator already installed (v$($existing[0].Version))"
            }
            
            # Step 2: Import module
            Write-Output "üì• STEP 2: Importing EasyPIM.Orchestrator module..."
            Import-Module EasyPIM.Orchestrator -Force
            
            $cmd = Get-Command -Name "Invoke-EasyPIMOrchestrator" -ErrorAction SilentlyContinue
            if ($cmd) {
              Write-Output "‚úÖ Invoke-EasyPIMOrchestrator command available"
              Write-Host "‚úÖ Invoke-EasyPIMOrchestrator command available" -ForegroundColor Green
            } else {
              throw "‚ùå Invoke-EasyPIMOrchestrator command not found after import"
            }
            
            # Step 3: Manual Azure Authentication (since AzurePowerShell@5 doesn't work)
            Write-Output "üîê STEP 3: Authenticating to Azure..."
            Write-Host "üîê STEP 3: Authenticating to Azure..." -ForegroundColor Yellow
            
            # Use service principal authentication
            $tenantId = "$(AZURE_TENANT_ID)"
            $clientId = "$(AZURE_CLIENT_ID)" 
            $subscriptionId = "$(AZURE_SUBSCRIPTION_ID)"
            
            if ([string]::IsNullOrEmpty($tenantId) -or [string]::IsNullOrEmpty($clientId) -or [string]::IsNullOrEmpty($subscriptionId)) {
              throw "‚ùå Missing required Azure authentication variables. Check variable group configuration."
            }
            
            Write-Output "   Tenant ID: $tenantId"
            Write-Output "   Client ID: $clientId" 
            Write-Output "   Subscription ID: $subscriptionId"
            
            # Since we're in a pipeline, we should already have Azure context from the agent
            # Let's check if we already have a valid context
            try {
              $context = Get-AzContext -ErrorAction SilentlyContinue
              if ($context) {
                Write-Output "‚úÖ Existing Azure context found: $($context.Account.Id)"
                Write-Output "   Subscription: $($context.Subscription.Name)"
                Write-Host "‚úÖ Azure authentication ready" -ForegroundColor Green
              } else {
                # If no context, we need to authenticate
                # Note: This would require additional setup for service principal credentials
                Write-Output "‚ö†Ô∏è  No Azure context found, but EasyPIM should still work with managed identity"
              }
            } catch {
              Write-Output "‚ö†Ô∏è  Azure PowerShell context check failed: $($_.Exception.Message)"
              Write-Output "‚ö†Ô∏è  Continuing - EasyPIM may use its own authentication"
            }
            
            # Step 4: Execute EasyPIM
            Write-Output "üéØ STEP 4: Executing EasyPIM Orchestrator..."
            Write-Host "üéØ STEP 4: Executing EasyPIM Orchestrator..." -ForegroundColor Cyan
            
            $params = @{
              KeyVaultName = "$(KEYVAULT_NAME)"
              SecretName = "$(SECRET_NAME)"
              WhatIf = [bool]${{ parameters.WhatIf }}
              Mode = "${{ parameters.Mode }}"
              Verbose = $true
            }
            
            Write-Output "üìã EasyPIM Parameters:"
            $params | ConvertTo-Json -Depth 2 | Write-Output
            
            # Execute EasyPIM
            Write-Host "üöÄ EXECUTING EASYPIM NOW!" -ForegroundColor Red
            Invoke-EasyPIMOrchestrator @params
            
            Write-Output "‚úÖ EasyPIM execution completed successfully!"
            Write-Host "‚úÖ EasyPIM execution completed successfully!" -ForegroundColor Green
            
          } catch {
            Write-Output "‚ùå PIPELINE ERROR: $($_.Exception.Message)"
            Write-Host "‚ùå PIPELINE ERROR: $($_.Exception.Message)" -ForegroundColor Red
            Write-Output "üìç Error Location: $($_.InvocationInfo.ScriptName):$($_.InvocationInfo.ScriptLineNumber)"
            Write-Output "üìç Stack Trace: $($_.ScriptStackTrace)"
            
            # Don't throw - let pipeline show as completed with errors visible
            exit 1
          }
          
          Write-Output "üèÅ PIPELINE COMPLETED - $(Get-Date)"
          Write-Host "üèÅ PIPELINE COMPLETED - $(Get-Date)" -ForegroundColor Green
