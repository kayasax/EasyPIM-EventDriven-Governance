# Simple Diagnostic Pipeline to test authentication
trigger: none

parameters:
- name: serviceConnection
  displayName: 'Azure Service Connection'
  type: string
  default: 'EasyPIM-Azure-Connection'

variables:
- group: EasyPIM-EventDriven-Governance

pool:
  vmImage: 'ubuntu-latest'

name: EasyPIM_Diagnostic_$(Date:yyyyMMdd)_$(Rev:r)

stages:
- stage: Diagnostic
  displayName: 'Diagnostic Tests'
  jobs:
  - job: TestAuthentication
    displayName: 'Test Authentication'
    steps:
    - checkout: self
      displayName: 'Checkout Repository'

    - task: AzurePowerShell@5
      displayName: 'Test Azure PowerShell Authentication'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'inlineScript'
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        inlineScript: |
          Write-Host "üîç Testing Azure PowerShell authentication..." -ForegroundColor Green
          
          $context = Get-AzContext
          if ($context) {
            Write-Host "‚úÖ Azure PowerShell authenticated as: $($context.Account.Id)" -ForegroundColor Green
            Write-Host "     Subscription: $($context.Subscription.Name) ($($context.Subscription.Id))" -ForegroundColor Gray
            Write-Host "     Tenant: $($context.Tenant.Id)" -ForegroundColor Gray
          } else {
            Write-Host "‚ùå No Azure PowerShell context found" -ForegroundColor Red
            throw "Azure PowerShell authentication failed"
          }

          Write-Host "üìã Testing Key Vault access..." -ForegroundColor Cyan
          try {
            $keyVault = Get-AzKeyVault -VaultName "$(AZURE_KEY_VAULT_NAME)" -ErrorAction Stop
            Write-Host "‚úÖ Key Vault accessible: $($keyVault.VaultName)" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Key Vault access failed: $_" -ForegroundColor Red
            throw $_
          }

          Write-Host "‚úÖ Authentication diagnostic completed successfully!" -ForegroundColor Green

    - task: AzureCLI@2
      displayName: 'Test Azure CLI & Graph Token'
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "üîç Testing Azure CLI authentication..." -ForegroundColor Green
          
          az account show --output table
          
          Write-Host "üîç Testing Graph token acquisition..." -ForegroundColor Green
          $graphToken = az account get-access-token --resource https://graph.microsoft.com --query "accessToken" -o tsv
          
          if ($graphToken -and $graphToken.Length -gt 100) {
            Write-Host "‚úÖ Graph token acquired successfully (length: $($graphToken.Length))" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Failed to get Graph token" -ForegroundColor Red
            throw "Graph token acquisition failed"
          }

          Write-Host "‚úÖ Azure CLI diagnostic completed successfully!" -ForegroundColor Green
