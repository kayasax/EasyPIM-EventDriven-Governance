# DIRECT EasyPIM Pipeline - NO VALIDATION STAGE BLOCKING
# This will actually run the EasyPIM script!

trigger: none

parameters:
- name: keyVaultName
  displayName: 'Key Vault Name'
  type: string
  default: 'kv-easypim-8368'
- name: configSecretName
  displayName: 'Configuration Secret Name'  
  type: string
  default: 'easypim-config-json'

pool: Default

variables:
- group: EasyPIM-EventDriven-Governance

jobs:
- job: DirectEasyPIMExecution
  displayName: 'Direct EasyPIM Execution'
  timeoutInMinutes: 10
  steps:
  - checkout: self

  - task: AzurePowerShell@5
    displayName: 'RUN EASYPIM NOW'
    inputs:
      azureSubscription: 'EasyPIM-Azure-Connection'
      scriptType: 'inlineScript'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      failOnStandardError: false
      inlineScript: |
        Write-Host "üöÄ STARTING EASYPIM EXECUTION - NO VALIDATION BLOCKING!" -ForegroundColor Red
        Write-Host "üìã Key Vault: ${{ parameters.keyVaultName }}" -ForegroundColor Yellow
        Write-Host "üìã Secret: ${{ parameters.configSecretName }}" -ForegroundColor Yellow
        
        # Install EasyPIM module
        Write-Host "üì¶ Installing EasyPIM module..." -ForegroundColor Green
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -Force
        Install-Module -Name EasyPIM.Orchestrator -Force -Scope CurrentUser -AllowClobber -Verbose
        
        # Import module  
        Import-Module EasyPIM.Orchestrator -Force -Verbose
        
        # Verify command exists
        $cmd = Get-Command -Name "Invoke-EasyPIMOrchestrator" -ErrorAction SilentlyContinue
        if ($cmd) {
          Write-Host "‚úÖ EasyPIM command found!" -ForegroundColor Green
        } else {
          Write-Host "‚ùå EasyPIM command NOT found!" -ForegroundColor Red
          Get-Module -ListAvailable | Where-Object Name -like "*EasyPIM*" | Format-Table
          throw "EasyPIM module not available"
        }
        
        # Get Graph token via Azure CLI
        Write-Host "üîê Getting Microsoft Graph token..." -ForegroundColor Cyan
        try {
          $graphToken = az account get-access-token --resource https://graph.microsoft.com --query "accessToken" -o tsv
          if ($graphToken -and $graphToken.Length -gt 50) {
            Write-Host "‚úÖ Graph token acquired (length: $($graphToken.Length))" -ForegroundColor Green
            
            # Connect to Graph
            Import-Module Microsoft.Graph.Authentication -Force -ErrorAction SilentlyContinue
            $secureToken = ConvertTo-SecureString $graphToken -AsPlainText -Force
            Connect-MgGraph -AccessToken $secureToken -NoWelcome
            Write-Host "‚úÖ Connected to Microsoft Graph" -ForegroundColor Green
          }
        } catch {
          Write-Host "‚ö†Ô∏è Graph connection failed: $_" -ForegroundColor Yellow
        }
        
        # EXECUTE EASYPIM NOW!
        Write-Host "üéØ EXECUTING EASYPIM ORCHESTRATOR NOW!" -ForegroundColor Red
        try {
          Invoke-EasyPIMOrchestrator -KeyVaultName '${{ parameters.keyVaultName }}' -SecretName '${{ parameters.configSecretName }}' -WhatIf:$false -Mode 'delta' -Verbose
          Write-Host "‚úÖ EASYPIM EXECUTION COMPLETED!" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå EASYPIM EXECUTION FAILED: $_" -ForegroundColor Red
          Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red
          # Don't throw - let's see what happened
        }
        
        Write-Host "üèÅ Script completed" -ForegroundColor Magenta
